(setq deck 	'())
(setq me '(0))
(setq croupier '(0))
(setq player1 '(0))

(defun sumalista (lista)
	(cond ((null lista) 0)
	(t (+ (car lista) (sumalista (cdr lista))) ) ))

(defun shuffle (lista)
	"Returns a shuffling of list, by sorting it with a random predicate. List may be modified."
	(sort lista #'(lambda (x y)
		(declare (ignore x y))
		(zerop (random 2)))))

(defun inicio ()
	(push  (pop deck) me)
	(push  (pop deck) player1)
	(push  (pop deck) me)
	(push  (pop deck) player1)
	(push  (pop deck) croupier)
	(imprimir)		)

(defun plantarse()
	(setf me (remove 0 me))		)
(defun croupierseplanta()
	(setf croupier (remove 0 croupier))		)
(defun player1seplanta()
	(setf player1 (remove 0 player1))		)

(defun imprimir()
	(print me)
	(print player1)
	(print croupier)	)

(defun blackjack()
	(if (and (member 10 me) (member 1 me))
		(print '(ganaste blackjack!))	)
	(if (or (and (member 10 croupier) (member 1 croupier)) (and (member 10 player1) (member 1 player1))	)
		(print '(perdiste blackjack!))	)								)

(defun juego()
	(if (> (sumalista me) 21)
		(print '(perdiste))
		(if (and (> (sumalista croupier) 21)  (> (sumalista me) (sumalista player1) ) )
			(print '(ganaste!))
			(if (and (> (sumalista croupier) 16) (> (sumalista me) (sumalista player1) ) )
				(print '(ganaste!))
				(if (and (> (sumalista croupier) 16) (< (sumalista me) (sumalista player1)) (< (sumalista player1) 22)  )
					(print '(perdiste))		)		)		)		)		)

(defun start()
	(setf deck '(10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 1 1 1 1))
	(setf me '(0)) 
	(setf croupier '(0))
	(setf player1 '(0))
	(shuffle deck)
	(inicio)
	(blackjack)			)

(defun seguir()
	(if (> (sumalista croupier) 16) 
		(croupierseplanta)			)
	(if (> (sumalista player1) 16) 
		(player1seplanta)			)
	(if (member 0 me)
		(push  (pop deck) me)		)
	(if (member 0 croupier)
		(push  (pop deck) croupier)	)
	(if (member 0 player1)
		(push  (pop deck) player1)	)

	(imprimir)
	(juego)								)
